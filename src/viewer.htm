<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>GeoJSON Viewer – Turf.js + Leaflet + SQLite + Slider</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin />

  <style>
    html, body, #map { height: 100%; margin: 0; }
    #controls {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 1000;
      background: #fff;
      padding: 10px 14px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,.25);
      font: 14px/1.5 system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }
    #controls label { display:block; margin-bottom:6px; }
    #sliderWrapper { margin-top:8px; }
    #timeValue { font-weight:bold; margin-left:6px; }
  </style>
</head>
<body>
  <div id="controls">
    <label>
      <strong>Load SQLite DB:</strong>
      <input type="file" id="dbInput" accept=".sqlite,.db" />
    </label>
    <label>
      <strong>Load GeoJSON:</strong>
      <input type="file" id="geojsonInput" accept=".geojson,.json" disabled />
    </label>
    <div id="sliderWrapper">
      <strong>Time slot:</strong>
      <input type="range" id="timeSlider" min="0" max="287" step="1" value="100" />
      <span id="timeValue">0</span>
    </div>
  </div>

  <div id="map"></div>

  <!-- JS libraries -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin></script>
  <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6.5.0/turf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.10.2/sql-wasm.js"></script>

  <script>
    /* -----------------------------------------------------------
     * Globals & helpers
     * ---------------------------------------------------------*/
    let SQL = null;   // sql.js module
    let db = null;    // active SQLite instance
    let geojsonLayer; // Leaflet layer
    let currentData;  // cached GeoJSON for redraws

    // slider time (0-288)
    const slider = document.getElementById('timeSlider');
    const timeValueEl = document.getElementById('timeValue');
    let time = Number(slider.value);
	const cache = {};

    slider.addEventListener('input', () => {
      time = Number(slider.value);
      timeValueEl.textContent = time;
      // redraw with new styles if layer exists
      if (currentData && db) refreshGeoJSON();
    });
	
	function cacheTraffic(cache, time) {
		const stmt = db.prepare(
		`SELECT edge_id, speed_mean * count_mean AS flow
		   FROM traffic_data
			  WHERE hour_slot = ?`
		);
		stmt.bind([time]);

		  const flows = {};
		  while (stmt.step()) {
			const row = stmt.getAsObject();        // {edge_id: …, flow: …}
			flows[row.edge_id] = row.flow;         // store in plain JS object
		  }
		  stmt.free();                             // always free prepared stmts
		  
		  cache[time] = flows;
    }

    function getColor({ properties: { poly_cid : edge_id, poly_length : edge_length } }, cache, time) {
    if (!db) {
		  return '#3388ff';
	  }
	  
	  if (!cache[time]) {
		  cacheTraffic(cache, time);
	  }
	  
	  const data = cache[time];
	  
	  const F = data[edge_id];
	  const T = data[-edge_id];
	  
	  const min_length = 2;
	  const max_flow = 3000 / min_length 
	  
	  let flow = ((F+T)/2) || F || T || 0
	  flow /= edge_length;
	  
	  if (flow < .5) {
		  return "rgba(0, 255, 0, 0)";
	  }
	 
	  
	  color = flow / max_flow * 255;
	  

      return `rgb(${255-color}, 32, 32)`;
    }

    /* -----------------------------------------------------------
     * Leaflet map setup
     * ---------------------------------------------------------*/
    const map = L.map('map').setView([0,0],2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    function featureStyle(f){
      const color = getColor(f, cache, time);
      return { color, weight:2, opacity:1, fillColor:color, fillOpacity:.4 };
    }
    function pointMarker(f, latlng){
      const color = getColor(f, cache, time);
      return L.circleMarker(latlng, { radius:6, color, weight:2, opacity:1, fillColor:color, fillOpacity:.75 });
    }

    function refreshGeoJSON(){
      if (!currentData) return;
      if (geojsonLayer) map.removeLayer(geojsonLayer);	  
      geojsonLayer = L.geoJSON(currentData, { style: featureStyle, pointToLayer: pointMarker }).addTo(map);
    }

    /* -----------------------------------------------------------
     * SQLite loading
     * ---------------------------------------------------------*/
    const dbInput = document.getElementById('dbInput');
    initSqlJs({ locateFile: f => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.10.2/${f}` })
      .then(SQLlib => { SQL = SQLlib; console.log('sql.js ready'); })
      .catch(err => console.error('sql.js init error', err));

    dbInput.addEventListener('change', e=>{
      if(!SQL){ alert('SQL.js is not ready yet, try again.'); return; }
      const file = e.target.files[0];
      if(!file) return;
      const r = new FileReader();
      r.onload = ev => {
        try{
          const u8 = new Uint8Array(ev.target.result);
          if(db) db.close();
          db = new SQL.Database(u8);
          console.log('DB loaded');
          document.getElementById('geojsonInput').disabled = false; // enable geojson input
          // If a geojson was already chosen before DB, refresh colors
          if(currentData) refreshGeoJSON();
        }catch(err){
          console.error(err);
          alert('Failed to load DB');
        }
      };
      r.readAsArrayBuffer(file);
    });

    /* -----------------------------------------------------------
     * GeoJSON loading
     * ---------------------------------------------------------*/
    const geojsonInput = document.getElementById('geojsonInput');
    geojsonInput.addEventListener('change', e=>{
      const file = e.target.files[0];
      if(!file) return;
      if(!db){ alert('Please load the database first.'); geojsonInput.value=""; return; }
      const r = new FileReader();
      r.onload = ev => {
        try{
          currentData = JSON.parse(ev.target.result);
          refreshGeoJSON();
          // zoom to bounds
          const bbox = turf.bbox(currentData);
          map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]], { padding:[20,20] });
        }catch(err){
          console.error(err);
          alert('Invalid GeoJSON file');
        }
      };
      r.readAsText(file);
    });
  </script>
</body>
</html>